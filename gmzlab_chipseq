#!/bin/bash

if [ $# -lt 1 ]
then
	echo 'Parameters file not properly provided. Quiting...'
	exit
elif [ $# -eq 1 ]
then
	RUNMODE=$2dont
else
	RUNMODE=$2
fi


############################# LOADING PARAMETERS (I) #############################

# Working directory: absolute path to the folder containing all files.
WD=$(grep working_directory: $1 | awk '{ print $2 }')
# Genome folder absolute path.
GENOME=$(grep genome_path: $1 | awk '{ print $2 }')
# Wether Spike-in is included or not.
SPIKE=$(grep spikein: $1 | awk '{ print $2 }')
# Spike-in genome folder absolute path.
GENOME_SPIKE=$(grep genome_spike: $1 | awk '{ print $2 }')
# Number of processors.
THREADS=$(grep number_processors: $1 | awk '{ print $2 }')
# Wether reads are paired end or not.
PAIRED_END=$(grep paired_end: $1 | awk '{ print $2 }')
# Maximum distance between peaks in regions.
MAX_DIST=$(grep max_distance: $1 | awk '{ print $2 }')
# Bin size for bigwig generation (number of bases).
BIN_SIZE=$(grep bin_size: $1 | awk '{ print $2 }')
# Number of samples.
NSAMPLES=$(grep sample_ $1 | wc -l)
# Samples names saved within an array.
SAMPLES=()
for i in `seq 1 $NSAMPLES`
do
	SAMPLES[$i]=$(grep sample_${i}: $1 | awk '{ print $2 }')
done
# Input name.
INPUT=$(grep input: $1 | awk '{ print $2 }')
if [ -z $INPUT ]
then
	INPUT='not_provided'
fi
# Histone name.
HISTONE=$(grep histone: $1 | awk '{ print $2 }')
if [ -z $HISTONE ]
then
	HISTONE='not_provided'
fi




############################# WORKING DIRECTORY STRUCTURE ############################# 

if [ $RUNMODE == 'wd' ]
then
	echo 'Creating working directory on' $WD
	echo 'Please transfer the samples .fastq files to corresponding folders'
	echo 'and run this pipeline without setting the 2nd parameter to wd.'
	mkdir -p $WD
	cd $WD
	mkdir bam_files bam_files/per_replicate bw_files bw_files/per_replicate bw_files/spikein bw_files/normalized bw_files/normalized/spikein quality_control samples results results/plots results/clusters results/peaks
	cd samples
	mkdir ${SAMPLES[@]} 
	exit
fi


############################# LOADING PARAMETERS (II) #############################

# Number of replicates per sample, input and/or histone.
NREP=()
for i in `seq 1 $NSAMPLES`
do
	NREP[$i]=`ls --format single-column ${WD}/samples/${SAMPLES[$i]}/*.fastq.gz | wc -l`
	if [ $PAIRED_END == 'yes' ]
	then
		NREP[$i]=$((${NREP[$i]}/2))
	fi
done



############################# REPORTING PARAMETERS #############################

echo ''
echo 'LOADING PARAMETERS'

echo ''
echo ' - Working directory:' $WD
echo ' - Genome folder path:' $GENOME
echo ' - Spike-in normalization:' $SPIKE
echo ' - Spike-in genome folder path:' $GENOME_SPIKE
echo ' - Number of processors:' $THREADS
echo ' - Paired end:' $PAIRED_END
echo ' - Maximum distance between peaks:' $MAX_DIST
echo ' - Bin size for bigwig generation:' $BIN_SIZE
echo ' - Number of samples:' $NSAMPLES
echo ' - Samples names:' ${SAMPLES[@]}
echo ' - Replicates per sample:' ${NREP[@]}
echo ' - Input sample:' $INPUT
echo ' - Histone sample:' $HISTONE
if [ $RUNMODE != 'nopeak' ]
then
	echo ' - Run mode: read mapping and peak calling'
else
	echo ' - Run mode: read mapping only'
fi
echo ''

sleep 10s


echo ''
echo 'PIPELINE RUNNING STARTED'
INIT=`date`
echo ''
echo ''



############################# BUILDING GENOME INDEX ############################# 

# This is a backup section for new organisms analysis when genome index is not built yet.

#cd $GENOME
#date
#bwa index *.fa
#samtools faidx *.fa
#cut -f1,2 *.fa.fai > chromsizes
#date

############################# READ MAPPING #############################

echo 'READ MAPPING'
echo ''
echo ''

for i in `seq 1 $NSAMPLES`
do
	cd ${WD}/samples/${SAMPLES[$i]}
	
	
	# QUALITY CONTROL:
	echo ${SAMPLES[$i]} 'quality control:'
	fastqc *.fastq.gz
	mv *fastqc* -t ../../quality_control
	echo ''
	echo ''
	
	
	# MAPPING EACH REPLICATE
	for j in `seq 1 ${NREP[$i]}`
	do
		echo 'Processing' ${SAMPLES[$i]}_$j 'on'
		date
		echo ''
		read_mapping.sh $THREADS ${GENOME}/*.fa ${SAMPLES[$i]}_$j $PAIRED_END $BIN_SIZE $SPIKE
		
		if [ $SPIKE == 'yes' ]
		then
			read_mapping_spike.sh $THREADS ${GENOME_SPIKE}/*.fa ${SAMPLES[$i]}_${j} $PAIRED_END
			
			# When single end and spike the extend parameter will extend the reads to deepTools default parameter.
			bamCoverage -p $THREADS -b ${SAMPLES[$i]}_${j}.bam -o ${WD}/bw_files/spikein/${SAMPLES[$i]}_${j}.bw --binSize 500 -e 
			bamCoverage -p $THREADS -b ${SAMPLES[$i]}_${j}_spike.bam -o ${WD}/bw_files/spikein/${SAMPLES[$i]}_${j}_spike.bw --binSize 500 -e
			
			if [ ${SAMPLES[$i]} != $INPUT ]
			then
				cd ${WD}/bw_files/spikein
				# SPIKE-IN NORMALIZATION
				bigwigCompare -p $THREADS -b1 ${SAMPLES[$i]}_${j}.bw -b2 ${INPUT}_${j}.bw --skipZeroOverZero --skipNAs --operation ratio -o ${SAMPLES[$i]}_${j}_ratio.bedgraph -of bedgraph --fixedStep --binSize 500
				bigwigCompare -p $THREADS -b1 ${SAMPLES[$i]}_${j}_spike.bw -b2 ${INPUT}_${j}_spike.bw --skipZeroOverZero --skipNAs --operation ratio -o ${SAMPLES[$i]}_${j}_ratio_spike.bedgraph -of bedgraph --fixedStep --binSize 500
			
				ENRICH=$(echo "scale=4; `LC_NUMERIC="C" awk '{sum += $4} END {printf "%.5f\n", sum}' ${SAMPLES[$i]}_${j}_ratio.bedgraph`/`wc -l ${SAMPLES[$i]}_${j}_ratio.bedgraph | cut -f1 -d ' '`" | bc)
				ENRICH_SPIKE=$(echo "scale=4; `LC_NUMERIC="C" awk '{sum += $4} END {printf "%.5f\n", sum}' ${SAMPLES[$i]}_${j}_ratio_spike.bedgraph`/`wc -l ${SAMPLES[$i]}_${j}_ratio_spike.bedgraph | cut -f1 -d ' '`" | bc)
				echo ${SAMPLES[$i]}_${j}	`echo "scale=4; ${ENRICH}/${ENRICH_SPIKE}" | bc` >> scale_factors.txt
				
				cd ${WD}/samples/${SAMPLES[$i]}
				# When single end and spike the extend parameter will extend the reads to deepTools default parameter, and effectiveGenomeSize factor is added for human hg38.
				bamCoverage --bam ${SAMPLES[$i]}_${j}.bam -o ${WD}/bw_files/normalized/spikein/${SAMPLES[$i]}_${j}.bw --binSize $BIN_SIZE -e -p $THREADS --normalizeUsing RPGC --effectiveGenomeSize 2913022398 --scaleFactor `grep $i ${WD}/bw_files/spikein/scale_factors.txt | cut -f2` 
			fi
		fi
		echo ''
	done
	
	
	# MERGING BAMS
	if [ ${NREP[$i]} -gt 1 ]
	then
		echo 'Merging' ${SAMPLES[$i]} 'bam files'
		samtools merge -@ $THREADS ${SAMPLES[$i]}_*.bam -o ${SAMPLES[$i]}.bam
		samtools index -@ $THREADS ${SAMPLES[$i]}.bam
		mv ${SAMPLES[$i]}.bam* -t ${WD}/bam_files
	else 
		echo 'There are no replicates to merge. Copying' ${SAMPLES[$i]} 'bam file to bam_files folder'
		cp ${SAMPLES[$i]}_1.bam ${WD}/bam_files/${SAMPLES[$i]}.bam
		cp ${SAMPLES[$i]}_1.bam.bai ${WD}/bam_files/${SAMPLES[$i]}.bam.bai
	fi
	
	
	# MERGING BIGWIGS
	# -p: number of processors.
	# --operation: operation over BIGWIG files. It is set to 'add' as if we had more reads, rather than 'average' which could have effect on peaks profile.
	# -bs: binsize for the output BIGWIG file. It is the same as set for the individual BIGWIG files.
	# -b1: first input BIGWIG file.
	# -b2: second input BIGWIG file.
	# -o: output BIGWIG file.
	if [ ${NREP[$i]} -gt 1 ]
	then
		echo 'Merging' ${SAMPLES[$i]} 'bigwig files'
		bigwigCompare -p $THREADS --operation add -bs 50 -b1 ${SAMPLES[$i]}_1.bw -b2 ${SAMPLES[$i]}_2.bw -o ${SAMPLES[$i]}.bw
		for j in `seq 3 ${NREP[$i]}`
		do
			bigwigCompare -p $THREADS --operation add -bs 50 -b1 ${SAMPLES[$i]}.bw -b2 ${SAMPLES[$i]}_${j}.bw -o ${SAMPLES[$i]}_n.bw
			mv ${SAMPLES[$i]}_n.bw ${SAMPLES[$i]}.bw
		done
		mv ${SAMPLES[$i]}.bw -t ${WD}/bw_files
	else 
		echo 'There are no samples to merge. Copying' ${SAMPLES[$i]} 'bigwig file to bw_files folder'
		cp ${SAMPLES[$i]}_1.bw ${WD}/bw_files/${SAMPLES[$i]}.bw
	fi
	
	
	# NORMALIZING BIGWIGS
	# -p: number of processors.
	# -b1: first input BIGWIG file.
	# -b2: second input BIGWIG file.
	# -bs: binsize for the output BIGWIG file. It is the same as set for the individual BIGWIG files.
	# --skipZeroOverZero: prevent from 0/0.
	# --operation: operation over BIGWIG files.
	# --pseudocount: a given value to add in order to avoid x/0.
	# -o: output BIGWIG file.
	cd ${WD}/bw_files
	if [ ${SAMPLES[$i]} != $INPUT ] && [ ${SAMPLES[$i]} != $HISTONE ] && [ $INPUT != 'not_provided' ]
	then
		echo 'Normalizing' ${SAMPLES[$i]} 'signal over' $INPUT
		bigwigCompare -p $THREADS -b1 ${SAMPLES[$i]}.bw -b2 ${INPUT}.bw --binSize 50 --skipZeroOverZero --operation ratio --pseudocount 0.001 0.001 -o normalized/${SAMPLES[$i]}.bw
		
	elif [ ${SAMPLES[$i]} != $INPUT ] && [ ${SAMPLES[$i]} != $HISTONE ]
	then
		echo 'Copying' ${SAMPLES[$i]} 'bigwig file to normalized files folder'
		cp ${SAMPLES[$i]}.bw normalized/${SAMPLES[$i]}.bw
		
	else
		echo 'This is a control sample that will not be normalized.'
	fi
	echo ''
	echo ''
	echo ''
done



# PCA

#echo 'PCA analysis'
#mv ${WD}/samples/*/*.bw -t ${WD}/bw_files/per_replicate
#cd ${WD}/bw_files/per_replicate

# Generating a previous matrix for PCA analysis:
# -bins: bin mode for whole genome correlation analysis.
# -BED-file: selected regions mode for correlation analysis.
# -BED: bed file containing selected regions.
# -bs: bin size in bases for correlation calculation.
# -b: bam/bigwig signal files (space-separated).
# -o: matrix .npz file name.
# -p: number of processors.
#multiBigwigSummary bins -p 40 -bs 10000 -b *.bw -o pca.npz 

# Plotting PCA results.
# -transpose: use matrix where rows are samples and columns are bins/features.
# -in: .npz file outputted by multiBigwigSummary/multiBamSummary.
# -o: plot file including file extension.
# -plotHeight: plot height.
# -plotWidth: plot width.
# -PCs: which principal components will be plotted, e.g., 1 2.
# -colors: list of colors separated by space.
#plotPCA --transpose -in pca.npz -o ${WD}/results/plots/pca.pdf --plotHeight 15 --plotWidth 10

# Cleaning up:
# -f: ignore if file does not exist. 
#rm -f pca.npz
echo ''
echo ''
echo ''


############################# PEAK CALLING #############################

if [ $RUNMODE != 'nopeak' ]
then
	echo 'PEAK CALLING'
	echo ''
	cd ${WD}/results

	for i in `seq 1 $NSAMPLES`
	do
	if [ ${SAMPLES[$i]} != $INPUT ] && [ ${SAMPLES[$i]} != $HISTONE ]
	then
		echo 'Processing' ${SAMPLES[$i]} 'on'
		date
		peak_calling.sh $WD $GENOME $THREADS ${SAMPLES[$i]} $PAIRED_END $MAX_DIST $INPUT $HISTONE 
		echo ''
		echo ''
	fi
	done

	mv *.peaks.* *.regions.* -t peaks
fi

# Relocating mapping files
echo 'Moving BAM files to' ${WD}/bam_files/per_replicate
cd ${WD}/samples
mv */*.bam -t ${WD}/bam_files/per_replicate
mv */*.bam.bai -t ${WD}/bam_files/per_replicate

#cd ${WD}/bam_files
#echo 'Sample,Total' > total_counts.csv
#for i in `seq 1 $NSAMPLES`
#do
#	for j in `seq 1 ${NREP[$i]}`
#	do
#		#echo ${SAMPLES[$i]}_$j,`samtools view -@ $THREADS -c ${SAMPLES[$i]}_$j.bam` >> total_counts.csv
#	done
#done

echo ''
echo ''



echo 'PIPELINE RUNNING STARTED ON'
echo $INIT
echo ''
echo 'AND FINISHED ON'
date
echo ''



exit

############################# METAPLOTTING #############################

# Generating a normalized matrix containing coverage signal on selected regions.
# - S: bigwig signal files (space-separated).
# - R: selected regions file.
# - o: gzipped output matrix 
# - binSize: bin size in bases for normalization.
# - b: upstream extend.
# - a: downstream extend.
# - p: number of processors.
# - q: quiet mode.
# - regionBodyLength: size in bases for resizing selected regions.
# - missingDataAsZero: NA values are converted into 0.
# - skipZeros: regions are removed when all signal values are 0.

cd ${WD}/bw_files

# Take care of bin size. Bin size is set for the regionBodyLength parameters and not for the real length of the gene.

computeMatrix scale-regions -S Data/WT/bw_files_merge/h3k37me3_B12_1.bw Data/WT/bw_files_merge/h3k9me3.bw Data/WT/bw_files_merge/h3k37me1_B12.bw Data/WT/bw_files_merge/h3k36me3.bw Data/WT/bw_files_merge/h3k27me3.bw Data/WT/bw_files_merge/h3k36me2.bw -R Data/genome/Homo_sapiens_ann_genes_110.bed -o results/metaplot/matrix1.gz --binSize 200 -b 3000 -a 3000 -p 12 -q --regionBodyLength 6000 --missingDataAsZero --skipZeros --maxThreshold 1000 # --minThreshold 0

# OMICS
computeMatrix scale-regions -S Data/WT/bw_files_merge/atac.bw Data/WT/bw_files_merge/pol2.bw Data/WT/bw_files_merge/rna_nascent.bw Data/WT/bw_files_merge/oris.bw -R Data/genome/Homo_sapiens_ann_genes_110.bed -o results/metaplot/matrix_omics.gz --binSize 200 -b 3000 -a 3000 -p 12 -q --regionBodyLength 6000 --missingDataAsZero --skipZeros --maxThreshold 1000 # --minThreshold 0
# OMICS CLUSTERED BY H3K37me3
computeMatrix scale-regions -S Data/WT/bw_files_merge/atac.bw Data/WT/bw_files_merge/pol2.bw Data/WT/bw_files_merge/rna_nascent.bw Data/WT/bw_files_merge/oris.bw -R results/metaplot/clusters.bed -o results/metaplot/matrix_omics_clustered.gz --binSize 200 -b 3000 -a 3000 -p 12 -q --regionBodyLength 6000 --missingDataAsZero --skipZeros --maxThreshold 300

computeMatrix reference-point -S ${SAMPLES} -R ../results/mid.bed -o ../results/matrix.gz --binSize 200 -b 3000 -a 3000 -p 36 -q --missingDataAsZero --skipZeros --referencePoint center TSS TES --maxThreshold 1000 # --minThreshold 0 

# Plotting previus matrix as a clustered heatmap.
# - m: gzipped matrix outputted by computeMatrix.
# - o: plot file including file extension.
# - silhouette: returning average silhouette value.
# - colorList: sorted list of colors corresponding to plotted signal values (comma-separated).
# - sortUsing: sorting using mean.
# - legendLocation: legend location as upper-right, upper-left, lower-right, center, etc.
# - sortUsingSamples: number of the sample(s) for sorting (space-separated).
# - clusterUsingSamples: number of the sample(s) for clustering (space-separated).
# - min: minimum value for plotting each sample (space-separated). Lower values will be plotted using the same colour.
# - max: maximum value for plotting each sample (space-separated). Higher valuer will be plotted using the same colour.
# - yMin: minimum value for Y axis in top profile plot.
# - yMax: maximum value for Y axis in top profile plot.
# - kmeans: number of clusters.
# - refPointLabel: name of the 0 value on profile topbar X axis when setting reference-point mode.
# - z: names of the different clusters or genes in Y axis.
# - outFileSortedRegions: name of the file RUNMODEd containing each cluster elements.

cd ${WD}/results

# MAIN MARKS
plotHeatmap -m matrix1.gz -o metaplot_sort_k37me3.pdf --plotType fill --heatmapHeight 14 --heatmapWidth 6  --colorList blue,white,red --sortUsing mean --legendLocation best --sortUsingSamples 1 --clusterUsingSamples 1 -min 0 -max 0.20 --yMin 0 --yMax 0.20  --kmeans 2 --outFileSortedRegions clusters.bed --samplesLabel H3K37me3 H3K9me3 H3K37me1 H3K36me3 H3K27me3 H3K36me2 --regionsLabel "High H3K37me3" "Low H3K37me3"

# OMICS
plotHeatmap -m matrix_omics.gz -o metaplot_omics.pdf --plotType fill --heatmapHeight 14 --heatmapWidth 6  --colorList blue,white,red --sortUsing mean --legendLocation best --sortUsingSamples 1 --clusterUsingSamples 1 -min 0 -max  1.2 1.2 0.4 0.25 --yMin 0 --yMax  1.2 1.2 0.4 0.25  --kmeans 2 --outFileSortedRegions clusters.bed --samplesLabel "ATAC" "Pol II" "Nascent RNA" "Oris"  --regionsLabel "High H3K37me3" "Low H3K37me3"

plotHeatmap -m results/metaplot/matrix_omics_clustered.gz   -o results/metaplot/metaplot_omics_clustered.pdf   --plotType fill --heatmapHeight 14 --heatmapWidth 6   --colorList blue,white,red   --sortRegions no -outFileSortedRegions clusters_omics.bed  --legendLocation best   --samplesLabel "ATAC" "Pol II" "Nascent RNA" "Oris"   --regionsLabel "High H3K37me3" "Low H3K37me3"   --yMin 0 --yMax 1.4 1 0.3 0.25   -min 0 -max 1.4 1 0.3 0.25


# REGION LENGTH
plotHeatmap -m matrix1.gz -o metaplot_sort_k37me3.pdf --plotType fill --heatmapHeight 14 --heatmapWidth 6  --colorList blue,white,red --sortUsing region_length --legendLocation best --sortUsingSamples 1 --clusterUsingSamples 1 -min 0 -max 0.25 --yMin 0 --yMax 0.25  --kmeans 3 --outFileSortedRegions clusters.bed --linesAtTickMarks 

# OTHERS
plotHeatmap -m matrix1.gz -o metaplot_sort_k9me3.pdf --plotType fill --heatmapHeight 14 --heatmapWidth 6  --colorList blue,white,red --sortUsing mean --legendLocation best --sortUsingSamples 2 --clusterUsingSamples 2 -min 0 -max 0.25 --yMin 0 --yMax 0.25  --kmeans 3 --outFileSortedRegions clusters.bed
plotHeatmap -m matrix1.gz -o metaplot_sort_k37me1.pdf --plotType fill --heatmapHeight 14 --heatmapWidth 6  --colorList blue,white,red --sortUsing mean --legendLocation best --sortUsingSamples 3 --clusterUsingSamples 3 -min 0 -max 0.25 --yMin 0 --yMax 0.25  --kmeans 3 --outFileSortedRegions clusters.bed
plotHeatmap -m matrix1.gz -o metaplot_sort_k36me3.pdf --plotType fill --heatmapHeight 14 --heatmapWidth 6  --colorList blue,white,red --sortUsing mean --legendLocation best --sortUsingSamples 4 --clusterUsingSamples 4 -min 0 -max 0.25 --yMin 0 --yMax 0.25  --kmeans 3 --outFileSortedRegions clusters.bed




plotProfile -m matrix1.gz -o profile1.pdf --plotType fill --legendLocation best --endLabel 'TTS' --colors green blue red gray --yMax 0.3 0.15 0.15 0.15 --kmeans 4 --outFileSortedRegions clusters.bed --clusterUsingSamples 1 --numPlotsPerRow 3  --linesAtTickMarks 

# plotProfile -m matrix1.gz -o profile1.pdf --plotType std --legendLocation best --perGroup --endLabel 'TTS' --colors green blue red --yMax 2 --kmeans 2 --outFileSortedRegions clusters/clusters.bed --clusterUsingSamples 1 --numPlotsPerRow 3



############################# CORRELATION HEATMAP PLOTTING #############################

# Generating a correlation matrix from signal on selected regions o whole genome mode.
# - bins: bin mode for whole genome correlation analysis.
# - bs: bin size in bases for correlation calculation. Only for bins mode.
# - BED-file: selected regions mode for correlation analysis.
# - BED: bed file containing selected regions. Only for BED-file mode.
# - b: bam/bigwig signal files (space-separated).
# - o: correlation matrix .npz file name.
# - bl: bed file containing regions that will be excluded.
# - p: number of processors.

cd ${WD}/bw_files/normalized

multiBigwigSummary bins -bs 10000 -b *.bw -o ../../results/correlations.npz -p 40 -bl ../../../annotation/Saccharomyces_cerevisiae_excluded_regions.bed --smartLabels

multiBigwigSummary BED-file --BED ../../../annotation/Homo_sapiens_ann_genes_110.bed -b *.bam -o ../../results/correlations.npz -p 40 -bl ../../../annotation/Saccharomyces_cerevisiae_excluded_regions.bed --smartLabels



# Plotting previus matrix as a clustered heatmap.
# - in: .npz file outputted by multiBigwigSummary/multiBamSummary.
# - c: correlation method: spearman or pearson.
# - whatToPlot: heatmap or scatterplot
# - o: plot file including file extension.
# - skipZeros: regions are removed when all signal values are 0.
# - plotHeight: plot height.
# - plotWidth: plot width.
# - colorMap: color range. Visit https://matplotlib.org/2.0.2/examples/color/colormaps_reference.html to decide the best selection.
# - removeOutliers: when outliers can change correlation values.

cd ${WD}/results

plotCorrelation -in correlations.npz -c pearson --whatToPlot heatmap -o plots/heatmap_`date | awk '{ print $5 }' | sed 's/:/_/g'`.pdf --skipZeros --plotHeight 10 --plotWidth 10 --colorMap bwr --removeOutliers





