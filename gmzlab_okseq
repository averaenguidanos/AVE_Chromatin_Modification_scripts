#!/bin/bash

if [ $# -ne 1 ]
then
	echo "Parameters file not provided. Quiting..."
	exit
fi
echo ""
echo "PIPELINE RUNNING STARTED"
INIT=`date`
echo ""
echo ""


############################# LOADING PARAMETERS #############################

echo "LOADING PARAMETERS"

PARAMS=$1
# Working directory: absolute path to the folder containing all files.
WD=$(grep working_directory: $PARAMS | awk '{ print $2 }')
# Genome folder absolute path.
GENOME=$(grep genome_path: $PARAMS | awk '{ print $2 }')
# Number of processors.
THREADS=$(grep number_processors: $PARAMS | awk '{ print $2 }')
# Wether reads are paired end or not.
PAIRED_END=$(grep paired_end: $PARAMS | awk '{ print $2 }')
# Number of samples.
NSAMPLES=$(grep sample_ $PARAMS | wc -l)
# Samples names saved within an array.
SAMPLES=()
for i in `seq 1 $NSAMPLES`
do
	SAMPLES[$i]=$(grep sample_${i}: $PARAMS | awk '{ print $2 }')
done
# Number of replicates per sample (assuming that all samples have the same number of replicates).
NREP=`ls --format single-column ${WD}/samples/${SAMPLES[1]}/*.fastq* | wc -l`
if [ $PAIRED_END == "yes" ]
then
	NREP=$(($NREP/2))
fi

echo ""
echo " - Working directory:" $WD
echo " - Genome folder path:" $GENOME
echo " - Number of processors:" $THREADS
echo " - Paired end:" $PAIRED_END
echo " - Number of samples:" $NSAMPLES
echo " - Number of replicates:" $NREP
echo " - Samples names:" ${SAMPLES[@]}
echo ""

sleep 10s

#exit
############################# BUILDING GENOME INDEX ############################# 

#cd $GENOME
#mkdir STAR_index
#STAR --runThreadN $THREADS --runMode genomeGenerate --genomeDir STAR_index --genomeFastaFiles genome.fa


############################# READ MAPPING #############################

echo "READ MAPPING"
echo ""

for i in `seq 1 $NSAMPLES`
do
	echo 'Processing' ${SAMPLES[$i]}':'
	echo ''
	cd ${WD}/samples/${SAMPLES[$i]}
	fastqc *.fastq*
	mv *fastqc* -t ../../quality_control
	echo ""
	echo ""
	gunzip -k *.fastq.gz
	
	if [ $PAIRED_END == 'yes' ]
	then
	REPS1=${SAMPLES[i]}_1_1.fastq
	if [ $NREP -ne 1 ] 
	then
		for j in `seq 2 $NREP`
		do
			REPS1=${REPS1},${SAMPLES[i]}_${j}_1.fastq
		done
	fi
	REPS2=${SAMPLES[i]}_1_2.fastq
	if [ $NREP -ne 1 ] 
	then
		for j in `seq 2 $NREP`
		do
			REPS2=${REPS2},${SAMPLES[i]}_${j}_2.fastq
		done
	fi
	
	STAR --runThreadN $THREADS --genomeDir $GENOME/STAR_index --readFilesIn $REPS1 $REPS2 --outSAMtype BAM Unsorted
	
	else
	REPS=${SAMPLES[i]}_1.fastq
	if [ $NREP -ne 1 ] 
	then
		for j in `seq 2 $NREP`
		do
			REPS=${REPS},${SAMPLES[i]}_${j}.fastq
		done
	fi
	
	STAR --runThreadN $THREADS --genomeDir $GENOME/STAR_index --readFilesIn $REPS --outSAMtype BAM Unsorted
	
	fi

# Cleaning up
rm *.fastq

# Filtering unique mapping reads
# -F: exclude alignments with the given flag. FLAG 256 refers to secondary alignments.
samtools view -F 256 -O BAM -@ $THREADS Aligned.out.bam > ${SAMPLES[i]}.smap.bam

# Removing PCR duplicates
samtools rmdup -s ${SAMPLES[i]}.smap.bam ${SAMPLES[i]}.unsorted.bam

# Sorting .bam file
samtools sort -@ $THREADS ${SAMPLES[i]}.unsorted.bam > ${SAMPLES[i]}.bam

# Indexing .bam file
samtools index -@ $THREADS ${SAMPLES[i]}.bam

# Generating bigwig files
bamCoverage -p ${THREADS} -b ${SAMPLES[i]}.bam --normalizeUsing RPKM -o ${SAMPLES[i]}.bw

# Cleaning up
rm Aligned.out.bam ${SAMPLES[i]}.smap.bam ${SAMPLES[i]}.unsorted.bam
mkdir STAR_logs
mv Log.final.out  Log.out  Log.progress.out  SJ.out.tab -t STAR_logs

done


# Relocating mapping files
cd ${WD}/samples
mv */*.bam -t ../bam_files
mv */*.bam.bai -t ../bam_files
mv */*.bw -t ../bw_files


echo "PIPELINE RUNNING STARTED ON"
echo $INIT
echo ""
echo "AND FINISHED ON"
date
echo ""


